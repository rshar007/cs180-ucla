#+AUTHOR: Ryan Sharif 204-351-724, Section 1B
#+TITLE: Homework 3: Graphs
#+LATEX_HEADER: \usepackage{amsthm}
#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \usepackage{tikz}

#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{verbatim}
#+LaTeX_HEADER: \usepackage{mathpazo}
#+LaTeX_HEADER: \linespread{1.05}
#+LaTeX_HEADER: \usepackage[scaled]{helvet}
#+LaTeX_HEADER: \usepackage{courier}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usetikzlibrary{positioning,calc}
#+LaTeX_CLASS_OPTIONS: [letter,twoside,twocolumn]
#+OPTIONS: toc:nil

* Lepidopderists

** Understanding the problem
Lets see if  we can simplify the  problem. We know that our  friends have caught
$n$  butterflies. Furthermore,  for  every  pair $i,  j$  they  have rendered  a
judgement such  that we  have $m$  judgements for pairs  that were  not declared
ambiguous.

Before  we   try  to   solve  the   problem,  let   us  consider   some  minimal
examples. Suppose  that our friends only  caught two butterflies. Given  that we
only  want to  consider  cases  when judgements  are  unambiguous,  we have  two
possible judgements: either $(x_1, x_2)$ belong to the same group or they belong
to the  different group.

Whatever algorithm we come up with, we  know that a minimal example will need to
account  for  a pair  that  belongs  to only  one  group.  Introducing a  single
butterfly, $x_3$, will force us to see  how to write our algorithm.  Assume that
$x_1, x_2$ have been  judged to be the same species. Then,  either $x_3$ is also
the same species as $x_1, x_2$, i.e., $(x_1, x_2)$, $(x_1, x_3), (x_2, x_3)$ are
all pairs  judged the  same, or  $x_3$ is judged  different, i.e.,  $(x_1, x_3),
(x_2, x_3)$ should be judged as different, if the judgements are consistent.
Thus, in both cases we will have two judgements that both need to belong to the
same category.

Let's model this simple example by creating a graph for the case in which $x_3$
is different from $x_1, x_2$:

\begin{figure}
\centering
\begin{tikzpicture}
\tikzstyle{every node}=[circle, draw]
\node (1) {$x_1$};
\node (3) [above right = of 1]{$x_3$};
\node (2) [below right = of 3]{$x_2$};


\draw [-] (1) -- (3);
\draw [-] (2) -- (3);

\end{tikzpicture}
\caption{A: 1,2; B: 3}
\end{figure}

We notice that if we model our data correctly, that is, if the judgements are
consistent, then we can perform a breadth-first-search on our graph for all
similarities, if $x_1$ and $x_3$ differ then we should be able to reach $x_2$
by level 2 of a breadth-first-search, since $x_2$ should also differ from
$x_3$. Let's try one more graph, modeling $x_1, x_2$ as the same, and
$x_3, x_4$ as the same:

\begin{figure}
\centering
\begin{tikzpicture}
\tikzstyle{every node}=[circle, draw]
\node (1) {$x_1$};
\node (3) [above right = of 1]{$x_3$};
\node (4) [below right = of 1]{$x_4$};
\node (2) [above right = of 4]{$x_2$};

\draw [-] (1) -- (3) -- (2);
\draw [-] (1) -- (4) -- (2);

\end{tikzpicture}
\caption{A: 1,2; B: 3,4}
\end{figure}

** Solution

Let's now explore a solution to this problem. In short, we want to setup
a simple graph based on the data we have from judgements of different
pairs. That is for each pair in the set /Different/, add a node to
our graph for any number in the pair that hasn't already been added to
our graph and connect the numbers in the pair. Then, when we have our
graph constructed, we perform a breadth-first-search for each pair in
the set of judgements /Same/. While there are pairs in the set /Same/
select an arbitrary pair and remove it from the set /Same/. Perform
a breadth-first-search on an arbitrary number in the pair, and attempt
to find its partner in the graph within a level 2 search. If it isn't
found, then our graph is inconsistent. If /Same/ is empty, then our
graph is consistent and we are done.

The construction of the simple graph runs in $O(m+n)$ time, since we have
$m$ nodes, and $n$ edges. Similarly, the breath-first-search runs in
$O(m+n)$

* Hamiltonian path for a Directed acyclic graph algorithm
#+BEGIN_COMMENT
Note that one possibility in the first part of the algorithm is that we need to
find the `deepest' node in our graph to find the node that will act as our
starting node. It remains to be shown that our algorithm as it stands will find
the deepest node as it is currently written.
#+END_COMMENT

The first step in finding a Hamiltonian  path for a directed acyclic graph is to
find  a source  to start  from.  The  fastest way  to do  so is  to reverse  the
direction  of every  directed  edge, creating  the graph  $G'$.  Then choose  an
arbitrary vertex  and follow its path  until you hit  a vertex that has  no more
directed edges.  This node, $s$, will  be the starting point for our Hamiltonian
path.

With a starting  node, $s$, we can  begin the business of  finding a Hamiltonian
path in our graph $G$ by  performing a Depth-First-Search. The algorithm runs as
follows:

- Note that we have a set of vertices $V$
- Start at node $s$
- While there is a directed edge to follow from the current node, follow it
  and remove the node from $V$
  + If the current node has multiple directed edges, add the current node to
    the stack
  + If we reach a node with no directed edges, we check to see if $V$ is empty
    - If $V$ is empty, we have visited every vertex and we are done
    - Else return to the vertex on our stack and remove it from the stack
  + If our stack is empty, we have exhausted our graph and found no Hamiltonian
    path

