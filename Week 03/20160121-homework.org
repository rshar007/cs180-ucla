
#+AUTHOR: Ryan Sharif: 204-351-724
#+TITLE: CS180: Homework 2 | Section 1B
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage{amsthm}
#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \usepackage{tikz}

#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{mathpazo}
#+LaTeX_HEADER: \linespread{1.05}
#+LaTeX_HEADER: \usepackage[scaled]{helvet}
#+LaTeX_HEADER: \usepackage{courier}
#+LATEX_HEADER: \usepackage{listings}
#+LaTeX_CLASS_OPTIONS: [letter,twoside,twocolumn]

* Glass jars

** (a) k = 2 jars
If we stick to a tight definition for /highest safe rung/, that is an exact
rung from which we can drop a jar and not have it break, then we are
limited by the number of jars we are given. In this case, if we have two
jars, we can climb our ladder in multiples of two, dropping the first jar
until it breaks, i.e., $k$ times. We then go down one rung to see if it 
breaks, if so then we know that the highest rung was $2k - 2$, otherwise it
is $2k - 1$. Unfortunately, this algorithm does not grow slower than linearly,
since $\lim_{n \rightarrow \infty} \frac{f(n)}{n} = \frac{1}{2}$.

If we loosen our definition of what the /highest safe rung/ means, that is
we don't mind being less precise, we can do a little better. We can try to
find the highest rung by using an exponential function, say $f(x) = n^x$.
We check $f(0)$, then $f(1)$, continuing until we find a rung that breaks
the jar. Once, found we can back track to our last value, and check one
more rung. With this algorithm, we find that 
$\lim_{n \rightarrow \infty}\frac{f(n)}{n} = 0$

* Wires
There are two things we must do for this problem:
(i) show that for any specified pattern in which input and output wire meet
	each other a valid switching of the data streams can always be
	found, and 
(ii) give an algorithm for finding such a valid switching

** There is always a valid switching
\begin{proof}
a valid switching of the data streams can always be found for any specified
pattern in which input and output wires meet each other. \\

Let us  assume for the purposes  of contradiction that there  does not
exist a valid switching of data streams for an arbitrary pattern.

By the definition of the problem, there are $n$ input wires and $n$
output wires. And we know that each input wire meets each output wire
at exactly one point, thus for every input wire, there are $n$ points
for any input stream to be switched on. By our assumption, there is at
least one output wire where two input streams, $I_1$ and $I_2$, are
switched on, i.e., there are no other output streams available for
which one of the two input streams to switch on instead.  Thus, $n$
input streams are switch on $n - 1$ output streams.  But we already
said that there are $n$ input and $n$ output wires, thus it cannot be
the case that there isn't an available output wire for $I_1$ or $I_2$
and there is an available output wire for $I_1$ or $I_2$.
\end{proof}

** Algorithm for finding a valid switching
Assume there is a `preference' order for each input wire, where
preference indicates the descending order from outputs that are
further downstream.

- Initially all input wires, i '$\in$' I, and output wires 
  o '$\in$' O are unconnected.

- While there is an i '$\in$' I that is unconnected and hasn't tried
  connecting to every o '$\in$' O
- Choose such an i
  + Let o be the most upstream outwire from i, to which i has not
    yet tried to connect
  + If o is not connected then
      - (i, o) i and o become connected 
  + Else o is currently connected to i'
    - If i' is more upstream to o than i then
        o remains unconnected
    - Else i is more upstream to o than i' then
      + (i, o) become connected
      + i' becomes unconnected
    - Endif
  + Endif
- Endwhile
- Return the set of connected pairs

If we assume that we have our `preferences' listed in order, the algorithm
will be $O(n^2)$, like our previous stable matching marriage problem.

* Tree induction
A binary tree is a rooted tree in which each node has at most two children.
Show by induction that in any binary tree the number of nodes with two
children is exactly one less than the number of leaves.

\begin{proof}
The number of nodes with two children is exactly one less than the number
of leaves.

Lets prove this statement by using induction. We'll start with a base case
of one, where $n = 1$, that is we have a tree with a root node, no children,
then: 

\begin{figure}
  \centering
  \begin{tikzpicture}
    \tikzstyle{every node}=[circle, draw]
    \node{1};
   \end{tikzpicture}
   \caption{$n = 1$}
\end{figure}

It is trivially true that the number of nodes with two children is exactly
one less than the number of leaves, since there is only one leaf, there are
zero node with two children. 

We now consider two cases. If you add a node to the tree, it does not
change the number of leaves in our tree. Hence, our statement is still
true.

\begin{figure}
  \centering
  \begin{tikzpicture}
    \tikzstyle{every node}=[circle, draw]
    \node{1}
      child {node {2}}
     ;
   \end{tikzpicture}
   \caption{$n = 2$}
\end{figure}

Finally, we consider the case in which we add one more node to our tree,
which produces a tree with two leaves. Thus, we have one node with two
leaves, which is what we wanted to show:

\begin{figure}
  \centering
  \begin{tikzpicture}
    \tikzstyle{every node}=[circle, draw]
    \node{1}
      child {node {2}}
      child {node {3}}
     ;
   \end{tikzpicture}
   \caption{$n = 3$}
\end{figure}

Thus, we can now show that for $n + 1$, our statement holds. We assume that
the number of nodes with two children is exactly less than the number of
leaves. Consider a tree $T$, which has $n$ leaves. Using our inductive
assumption, we know that the number of nodes with two children is exactly
less than the number of leaves. Suppose $T$ has $k$ leaves. If $k$ is even,
then since we have a binary tree, we add a tip to a leaf, which does not
produce another node with two children, thus our statement still obtains.
If $k$ is odd, then adding another node creates a new node with two children,
however, since we added a leaf, our statement still obtains. Thus, we have
shown that which we wanted to prove.
\end{proof}

* Crossing a rickety bridge
For simplicity, let us number our travelers: x_1 = 1 min, x_2 = 2 min,
x_3 = 7 min, x_4 = 10 min. Since, x_3 and x_4 take the longest time to
cross the  bridge, we  want to  send them  together to  minimize their
impact on  our crossing time.  Suppose we  want to send  them together
first. If  we do so,  then they have crossed  the bridge but  have now
stranded x_1 and  x_2. If we send  them last, then one of  them has to
cross the bridge  twice, since there is only one  torch. Thus, we send
x_1 and x_2  across first, for a  time of 2 minutes.  x_1 returns with
the torch, adding up  to 3 minutes total, so far. We  now send x_3 and
x_4 together, adding up to 13 minutes total. We now send x_2 back with
the torch, adding  up to 15 minutes total. Finally,  x_1 and x_2 cross
together, adding up to a total of 17 minutes.

* Induction

** The sum of the first $n$ integers is $\frac{n(n+1)}{2}$
   \begin{proof}
   The sum of the first $n$ integers is $\frac{n(n+1)}{2}$
   
   We will use a proof by induction. First, let us begin with the base case
   where $n = 1$. We check to see if the statement holds:

   \begin{align*}
   f(1) &= \frac{1(1+1)}{2} \\
   &= \frac{2}{2} \\ 
   &= 1
   \end{align*}

   Since, this holds true for our base case, we can make the inductive
   assumption, that is th  sum of the first $n$ integers
   is $\frac{n(n+1)}{2}$. Now we show that this holds for $n + 1$:

   \begin{align*}
   1 + 2 + 3 + ... + n + (n + 1) &= \frac{(n+1)(n+2)}{2} \\
   \shortintertext{Using our inductive assumption, we know the sum of
   of the first $n$ numbers}
   \frac{n(n+1)}{2} + n +1 &= \\
   \frac{n(n+1)+2(n+1)}{2} &= \\
   \frac{n(n+1)+2n + 2}{2} &= \\
   \frac{n^2 + n + 2n + 2}{2} &= \\
   \frac{n^2 + 3n + 2}{2} &= \\
   \frac{(n+1)(n+2)}{2} &= \frac{(n+1)(n+2)}{2}
   \end{align*}
   Thus, since we have shown that our left hand side is equivalent to
   the right hand side, we have shown what we wanted to prove.
   
   \end{proof}

** Inductive proof 2
\begin{proof}
$1\cdot2 + 2\cdot3 + 3\cdot4 + ... +n(n+1) = \frac{n(n+1)(n+2)}{3}$

Let us begin our proof by showing that the base case, where $n = 1$ holds:

\begin{align*}
f(1) = 1 \cdot 2 &= \frac{1(1+1)(1+2)}{3}\\
&= \frac{6}{3} \\
&= 2
\end{align*}

Since our base case obtains, we can make the inductive assumption and show
that for any $n$, our statement holds:

\begin{align*}
  1\cdot2 + 2\cdot3 + 3\cdot4 + ... +n(n+1) + n(n+2) &= \\ \frac{(n+1)(n+2)(n+3)}{3} \\
  \frac{n(n+1)(n+2)}{3} + (n+1)(n+2) &= \\
  \frac{n(n+1)(n+2)+3(n+1)(n+2)}{3} &= \\
  \frac{(n+1)(n+2)(n+3)}{3} &= \\ \frac{(n+1)(n+2)(n+3)}{3}
\end{align*}

\end{proof}
